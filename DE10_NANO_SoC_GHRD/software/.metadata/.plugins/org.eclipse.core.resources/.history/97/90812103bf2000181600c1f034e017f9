#ifndef wrap_H
#define wrap_H

#define BackServoMin 0x00    
#define BackServoMax 0x2E
#define FrontServoMin 0x00
#define FrontServoMax 0x10
#define DCMotorMin -127
#define DCMotorMax 127
#define FRONTLEFT 0
#define FRONTRIGHT 1
#define REARLEFT 2
#define REARRIGHT 3
#define FPGA_TO_HPS_LW_ADDR(base)  ((void *) (((char *)  (ALT_LWFPGASLVS_ADDR))+ (base)))

// Servo #1, Steering Control
// Type:  Input
// Width: Byte
// GPIO:  0_0
#define STEER_SERVO_ADD 0x00000110
#define STEER_SERVO_BASE FPGA_TO_HPS_LW_ADDR(STEER_SERVO_ADD)

// Servo #2, Emergency Braking System
// Type:  Input
// Width: Byte
// GPIO:  0_1
#define BRAKE_SERVO_ADD 0x00000111
#define BRAKE_SERVO_BASE FPGA_TO_HPS_LW_ADDR(BRAKE_SERVO_ADD)

// Drive Motor #1, Front Left
// Type:  Input
// Width: Longword
// GPIO:  dir - 0_26; mag - 0_27
#define FRONT_LEFT_MOTOR_ADD 0x00000114
#define FRONT_LEFT_MOTOR_BASE FPGA_TO_HPS_LW_ADDR(FRONT_LEFT_MOTOR_ADD)

// Drive Motor #2, Front Right
// Type:  Input
// Width: Longword
// GPIO:  dir - 0_28; mag - 0_29
#define FRONT_RIGHT_MOTOR_ADD 0x00000118
#define FRONT_RIGHT_MOTOR_BASE FPGA_TO_HPS_LW_ADDR(FRONT_RIGHT_MOTOR_ADD)

// Drive Motor #3, Rear Left
// Type:  Input
// Width: Longword
// GPIO:  dir - 0_30; mag - 0_31
#define REAR_LEFT_MOTOR_ADD 0x0000011c
#define REAR_LEFT_MOTOR_BASE FPGA_TO_HPS_LW_ADDR(REAR_LEFT_MOTOR_ADD)

// Drive Motor #4, Rear Right
// Type:  Input
// Width: Longword
// GPIO:  dir - 0_32; mag - 0_33
#define REAR_RIGHT_MOTOR_ADD 0x00000120
#define REAR_RIGHT_MOTOR_BASE FPGA_TO_HPS_LW_ADDR(REAR_RIGHT_MOTOR_ADD)

#endif
